version: "3.8"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: prescriber_point
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: prescriber_point
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy

  mcp-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.mcp
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: prescriber_point
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - mcp # Optional service - only runs when specifically requested

  frontend:
    build:
      context: ./frontend
      dockerfile: ${FRONTEND_DOCKERFILE:-Dockerfile}
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:3001}
      WATCHPACK_POLLING: ${WATCHPACK_POLLING:-false}
      DISABLE_CACHE: ${DISABLE_CACHE:-false}
    depends_on:
      - backend

volumes:
  postgres_data:
